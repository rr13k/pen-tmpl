package handler

import (
	machineservers "{.name}/internal/app/servers/machine_servers"
	"{.name}/internal/app/toolkit/log"
	"encoding/json"
	"fmt"
	"net/http"
)

// 申请机器
func MachineApple(w http.ResponseWriter, r *http.Request) {
	fmt.Println("hi MachineApple")
	type Args struct {
		Cpu    int
		Mem    int
		Disk   int
		NodeId string
	}

	var (
		args Args
	)
	json.NewDecoder(r.Body).Decode(&args)

	machineservers.Apple(&machineservers.MachineConfig{
		Cpu:  args.Cpu,
		Mem:  args.Mem,
		Disk: args.Disk,
	}, args.NodeId)

	res := &machineservers.JdosBaseRespone{
		Success: true,
		Code:    "0",
		Message: "MachineApple Success",
	}

	resByte, _ := json.Marshal(res)
	w.Write(resByte)
}

func ReleaseMachine(w http.ResponseWriter, r *http.Request) {
	fmt.Println("hi ReleaseMachine")

	type Args struct {
		Uuid *string `json:"uuid"`
	}

	var (
		args Args
		err  error
	)
	json.NewDecoder(r.Body).Decode(&args)

	if args.Uuid != nil {
		err = machineservers.Release(*args.Uuid)
	} else {
		log.Error("无法释放机器name或uuid为nil")
	}

	res := &machineservers.JdosBaseRespone{
		Success: true,
		Code:    "0",
		Message: "ReleaseMachine Success",
	}

	if err != nil {
		res.Success = false
		res.Message = "释放机器失败:" + *args.Uuid
	}

	resByte, _ := json.Marshal(res)
	w.Write(resByte)
}
